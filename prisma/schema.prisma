generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  ATTACK_HELICOPTER
}

enum Role {
  FACULTY_COUNSELOR
  PSYHOPE_COUNSELOR
  FACULTY_ADMIN
  PSYHOPE_ADMIN
  CLIENT
}

enum Channel {
  INSTAGRAM
  LINE
}

enum CounselorType {
  PSYHOPE
  FACULTY
}

model User {
  id               String          @id @default(uuid())
  namaRole         String          @map("nama_role")
  username         String          @unique
  fullname         String
  organizationCode String          @map("organization_code")
  token            String?
  account          Account?
  bookings         Booking[]
  isOnboarded      Boolean         @default(false)
  lineAcc          String?
  igAcc            String?
  CounselingLog    CounselingLog[]
  Councelor        Councelor?
}

model Councelor {
  id                Int                 @id @default(autoincrement())
  user              User                @relation(fields: [userId], references: [id])
  userId            String              @unique
  counselorType     CounselorType
  isOn              Boolean             @default(true)
  Booking           Booking[]
  councelorSchedule CouncelorSchedule[]
}

model CouncelorSchedule {
  id          Int        @id @default(autoincrement())
  councelor   Councelor? @relation(fields: [councelorId], references: [id])
  councelorId Int?
  workDay     String
  workTime    String[]
}

model Account {
  id         Int      @id @default(autoincrement())
  role       Role     @default(CLIENT)
  secondRole Role     @default(CLIENT)
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
  gender     Gender
  faculty    String
  major      String
  channel    Channel?
}

model Booking {
  id                Int                 @id @default(autoincrement())
  user              User                @relation(fields: [userId], references: [id])
  userId            String
  councelor         Councelor?          @relation(fields: [councelorId], references: [id])
  councelorId       Int?
  bookingDate       DateTime            @db.Date
  bookingDay        String              @default("")
  bookingTime       String              @default("")
  bookingTime2      String              @default("")
  counselorType     CounselorType       @map("counselor_type")
  reasonApply       String
  closestKnown      Boolean
  isAccepted        Boolean             @default(false)
  isTerminated      Boolean             @default(false)
  isSuicidal        Boolean
  adminAcc          Boolean             @default(false)
  number_1          Int
  number_2          Int
  number_3          Int
  number_4          Int
  number_5          Int
  number_6          Int
  number_7          Int
  number_8          Int
  number_9          Int
  number_10         Int
  number_11         Int
  number_12         Int
  RescheduleRequest RescheduleRequest[]
  blacklist         String[]
  CounselingLog     CounselingLog[]
}

model Article {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  title        String
  content      String   @db.Text
  posterUrl    String
  thumbnailUrl String
}

model Event {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  date        String   @db.Text
  location    String
  time        String
  description String   @db.Text
  posterUrl   String
}

model Infografic {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  title         String
  description   String   @db.Text
  infograficUrl String[]
}

model RescheduleRequest {
  id        Int      @id @default(autoincrement())
  booking   Booking  @relation(fields: [bookingId], references: [id])
  bookingId Int      @map("booking_id")
  time      DateTime
}

model CounselingLog {
  id        Int      @id @default(autoincrement())
  client    User     @relation(fields: [userId], references: [id])
  userId    String
  time      DateTime
  title     String   @db.Text
  detail    String   @db.Text
  booking   Booking  @relation(fields: [bookingId], references: [id])
  bookingId Int
}
